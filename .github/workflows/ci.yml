name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    name: Backend and Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      # GitHub Actions runners already include Docker and Docker Compose V2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and start services
        run: |
          docker compose build
          docker compose up -d
          
      - name: Wait for services to be ready
        run: |
          # Wait for MySQL to be ready
          echo "Waiting for MySQL to be ready..."
          timeout=60
          until docker compose exec -T mysql mysqladmin ping -h localhost -u root -proot.pa55 --silent || [ $timeout -eq 0 ]; do
            echo "Waiting for MySQL... ($timeout seconds left)"
            sleep 5
            timeout=$((timeout-5))
          done
          
          if [ $timeout -eq 0 ]; then
            echo "MySQL failed to start in time"
            docker compose logs mysql
            exit 1
          fi
          
          echo "MySQL is ready!"

      - name: Set up Backend
        run: |
          # Copy backend/.env.example to the container if it exists
          if [ -f "./backend/.env.example" ]; then
            docker compose exec -T php sh -c "cat > /var/www/html/.env.example" < ./backend/.env.example
            docker compose exec -T php sh -c "cp .env.example .env"
          else
            # Create a basic .env file if .env.example doesn't exist
            docker compose exec -T php sh -c "echo 'APP_KEY=' > /var/www/html/.env"
          fi
          
          docker compose exec -T php sh -c "composer install --no-interaction --prefer-dist --optimize-autoloader"
          docker compose exec -T php sh -c "php artisan key:generate --ansi"
          docker compose exec -T php sh -c "php artisan migrate --force"

      - name: Run Backend Tests
        run: |
          docker compose exec -T php sh -c "vendor/bin/phpunit --fail-on-risky --stop-on-failure"

      - name: Set up and test Frontend
        run: |
          cd frontend
          npm ci
          npm test
          npm run build

      - name: Cleanup Docker
        if: always()
        run: |
          docker compose down --volumes