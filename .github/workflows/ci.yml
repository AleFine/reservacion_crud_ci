name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test:
    name: Backend and Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare environment files
        run: |
          # Create .env.example file directly without heredoc
          if [ ! -f "./backend/.env.example" ]; then
            echo "Creating default .env.example file"
            echo "APP_NAME=Laravel" > ./backend/.env.example
            echo "APP_ENV=testing" >> ./backend/.env.example
            echo "APP_KEY=" >> ./backend/.env.example
            echo "APP_DEBUG=true" >> ./backend/.env.example
            echo "APP_URL=http://localhost" >> ./backend/.env.example
            echo "" >> ./backend/.env.example
            echo "DB_CONNECTION=mysql" >> ./backend/.env.example
            echo "DB_HOST=mysql" >> ./backend/.env.example
            echo "DB_PORT=3306" >> ./backend/.env.example
            echo "DB_DATABASE=restaurant_app" >> ./backend/.env.example
            echo "DB_USERNAME=user1" >> ./backend/.env.example
            echo "DB_PASSWORD=user1.pa55" >> ./backend/.env.example
          fi
          
          # Create a copy of .env.example as .env
          cp ./backend/.env.example ./backend/.env
          
          # Show created files
          echo "Environment files prepared"
          ls -la ./backend/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and start services
        run: |
          docker compose build
          docker compose up -d

      - name: Display running containers
        run: docker compose ps

      - name: Check volume mounts and files
        run: |
          docker compose exec -T php sh -c "ls -la /var/www/html"

      - name: Wait for services to be ready
        run: |
          # Wait for MySQL to be ready
          echo "Waiting for MySQL to be ready..."
          timeout=60
          until docker compose exec -T mysql mysqladmin ping -h localhost -u root -proot.pa55 --silent || [ $timeout -eq 0 ]; do
            echo "Waiting for MySQL... ($timeout seconds left)"
            sleep 5
            timeout=$((timeout-5))
          done
          
          if [ $timeout -eq 0 ]; then
            echo "MySQL failed to start in time"
            docker compose logs mysql
            exit 1
          fi
          
          echo "MySQL is ready!"

      - name: Set up Backend
        run: |
          # Run composer install
          docker compose exec -T php sh -c "composer install --no-interaction --prefer-dist --optimize-autoloader"
          
          # Generate application key
          docker compose exec -T php sh -c "php artisan key:generate --ansi"
          
          # Run migrations
          docker compose exec -T php sh -c "php artisan migrate --force"

      - name: Run Backend Tests
        run: |
          docker compose exec -T php sh -c "vendor/bin/phpunit --fail-on-risky --stop-on-failure"

      - name: Set up and test Frontend
        run: |
          cd frontend
          npm ci
          npm test
          npm run build

      - name: Cleanup Docker
        if: always()
        run: |
          docker compose down --volumes