name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test:
    name: Backend and Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Prepare environment files
        run: |
          if [ ! -f "./backend/.env.example" ]; then
            echo "Creating default .env.example file"
            cat > ./backend/.env.example << EOL
            APP_NAME=Laravel
            APP_ENV=testing
            APP_KEY=
            APP_DEBUG=true
            APP_URL=http://localhost

            DB_CONNECTION=mysql
            DB_HOST=mysql
            DB_PORT=3306
            DB_DATABASE=restaurant_app
            DB_USERNAME=user1
            DB_PASSWORD=user1.pa55
            EOL
          fi
          cp ./backend/.env.example ./backend/.env
          echo "Environment files prepared"
          ls -la ./backend/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and start services
        run: |
          docker compose build
          docker compose up -d

      - name: Display running containers
        run: docker compose ps

      - name: Check volume mounts and files
        run: |
          docker compose exec -T php sh -c "ls -la /var/www/html"

      - name: Wait for services to be ready
        run: |
          echo "Waiting for MySQL to be ready..."
          timeout=60
          until docker compose exec -T mysql mysqladmin ping -h localhost -u root -proot.pa55 --silent || [ $timeout -eq 0 ]; do
            echo "Waiting for MySQL... ($timeout seconds left)"
            sleep 5
            timeout=$((timeout-5))
          done

          if [ $timeout -eq 0 ]; then
            echo "MySQL failed to start in time"
            docker compose logs mysql
            exit 1
          fi

          echo "MySQL is ready!"

      - name: Set up Backend
        run: |
          docker compose exec -T php sh -c "composer install --no-interaction --prefer-dist --optimize-autoloader"
          docker compose exec -T php sh -c "php artisan key:generate --ansi"
          docker compose exec -T php sh -c "php artisan migrate --force"

      - name: Run Backend Tests
        run: |
          docker compose exec -T php sh -c "vendor/bin/phpunit --fail-on-risky --stop-on-failure"

      - name: Set up and test Frontend
        run: |
          cd frontend
          npm ci
          npm test
          npm run build

      - name: Cleanup Docker
        if: always()
        run: |
          docker compose down --volumes
